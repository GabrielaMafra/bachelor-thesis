@incollection{tlahistory,
    author = {Leslie Lamport},
    title = {The Specification Language TLA+},
    pages = {616--620},
    booktitle = {Logics of specification languages},
    editor = {Dines Bjørner e Martin C. Henson},
    publisher = {Springer},
    year = {2008},
    address = {Berlin},
    isbn = {3540741062},
    url = {http://lamport.azurewebsites.net/pubs/commentary-web.pdf}
}

@article{amazon,
 author = {Newcombe, Chris and Rath, Tim and Zhang, Fan and Munteanu, Bogdan and Brooker, Marc and Deardeuff, Michael},
 title = {How Amazon Web Services Uses Formal Methods},
 journal = {Commun. ACM},
 issue_date = {April 2015},
 volume = {58},
 number = {4},
 month = mar,
 year = {2015},
 issn = {0001-0782},
 pages = {66--73},
 numpages = {8},
 url = {http://doi.acm.org/10.1145/2699417},
 doi = {10.1145/2699417},
 acmid = {2699417},
 publisher = {ACM},
 address = {New York, NY, USA}
}

@incollection{Leonard2008,
    author = {Leonard, Elizabeth I. and Heitmeyer, Constance L.},
    title = {Automatic Program Generation from Formal Specifications using APTS},
    pages = {93--113},
    booktitle = {Automatic Program Development: A Tribute to Robert Paige},
    editor = {Danvy, Olivier and Mairson, Harry and Henglein, Fritz and Pettorossi, Alberto},
    year = {2008},
    publisher = {Springer Netherlands},
    address = {Dordrecht},
    isbn = {9781402065859},
    url = {https://doi.org/10.1007/978-1-4020-6585-9\_10}
}

@inproceedings{tlaps2010,
  TITLE = {{Verifying Safety Properties With the TLA+ Proof System}},
  AUTHOR = {Chaudhuri, Kaustuv and Doligez, Damien and Lamport, Leslie and Merz, Stephan},
  URL = {https://hal.inria.fr/inria-00534821},
  BOOKTITLE = {{Fifth International Joint Conference on Automated Reasoning - IJCAR 2010}},
  ADDRESS = {Edinburgh, United Kingdom},
  EDITOR = {J{\"u}rgen Giesl and Reiner Haehnle},
  PUBLISHER = {{Springer}},
  SERIES = {Lecture Notes in Artificial Intelligence},
  VOLUME = {6173},
  PAGES = {142--148},
  YEAR = {2010},
  MONTH = Jul,
  DOI = {10.1007/978-3-642-14203-1\_12},
  PDF = {https://hal.inria.fr/inria-00534821/file/tlaps.pdf},
  HAL_ID = {inria-00534821},
  HAL_VERSION = {v1},
}

@article{Najafi2013,
  author = {Najafi, Mehrnaz and Haghighi, H},
  year = {2013},
  month = {12},
  pages = {1953-1977},
  title = {A formal mapping from Object-Z specification to C++ code},
  volume = {20},
  journal = {Scientia Iranica}
}

@Book{specifying-systems,
author = {Lamport, Leslie},
title = {Specifying Systems: The TLA+ Language and Tools for Hardware and Software Engineers},
year = {2002},
month = {June},
abstract = {The complete book of TLA+. The first seven chapters (83 pages) are a rewritten version of [127]. That and the chapter on the TLC model checker are about as much of the book as I expect people to read. The web page contains errata and some exercises and examples. This book will teach you how to write specifications of computer systems, using the language TLA+. It's rather long, but most people will read only Part I, which comprises the first 83 pages. That part contains all that most engineers need to know about writing specifications; it assumes only the basic background in computing and knowledge of mathematics expected of an undergraduate studying engineering or computer science. Part II contains more advanced material for more sophisticated readers. The remainder of the book is a reference manual| Part III for the TLA+ tools and Part IV for the language itself. Errata to Specifying Systems},
publisher = {Addison-Wesley},
url = {https://www.microsoft.com/en-us/research/publication/specifying-systems-the-tla-language-and-tools-for-hardware-and-software-engineers/},
}

@online{hyperbook,
  author = {Leslie Lamport},
  title = {The TLA Hyperbook},
  year = 2015,
  url = {http://lamport.azurewebsites.net/tla/hyperbook.html},
  urlaccessdate = {25 mai. 2019}
}

@inproceedings{pluscal,
  author    = {Leslie Lamport},
  title     = {The PlusCal Algorithm Language},
  booktitle = {Theoretical Aspects of Computing - {ICTAC} 2009, 6th International
               Colloquium, Kuala Lumpur, Malaysia, August 16-20, 2009. Proceedings},
  pages     = {36--60},
  year      = {2009},
  url       = {https://doi.org/10.1007/978-3-642-03466-4\_2},
  doi       = {10.1007/978-3-642-03466-4\_2},
  timestamp = {Tue, 14 May 2019 10:00:38 +0200},
  biburl    = {https://dblp.org/rec/bib/conf/ictac/Lamport09},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{tlaformalization,
  author    = {Leslie Lamport},
  title     = {The Temporal Logic of Actions},
  journal   = {{ACM} Trans. Program. Lang. Syst.},
  volume    = {16},
  number    = {3},
  pages     = {872--923},
  year      = {1994}
}

@article{merzlogic,
  author = {Merz, Stephan},
  year = {2003},
  month = {01},
  pages = {351-379},
  title = {On the logic of TLA+},
  volume = {22},
  journal = {Computers and Artificial Intelligence}
}

@inproceedings{proofsystem,
  author    = {Kaustuv Chaudhuri and
               Damien Doligez and
               Leslie Lamport and
               Stephan Merz},
  title     = {A {TLA+} Proof System},
  booktitle = {{LPAR} Workshops},
  series    = {{CEUR} Workshop Proceedings},
  volume    = {418},
  publisher = {CEUR-WS.org},
  year      = {2008}
}

@article{picalculus,
title = "A calculus of mobile processes, I",
journal = "Information and Computation",
volume = "100",
number = "1",
pages = "1 - 40",
year = "1992",
issn = "0890-5401",
doi = "https://doi.org/10.1016/0890-5401(92)90008-4",
url = "http://www.sciencedirect.com/science/article/pii/0890540192900084",
author = "Robin Milner and Joachim Parrow and David Walker",
abstract = "We present the π-calculus, a calculus of communicating systems in which one can naturally express processes which have changing structure. Not only may the component agents of a system be arbitrarily linked, but a communication between neighbours may carry information which changes that linkage. The calculus is an extension of the process algebra CCS, following work by Engberg and Nielsen, who added mobility to CCS while preserving its algebraic properties. The π-calculus gains simplicity by removing all distinction between variables and constants; communication links are identified by names, and computation is represented purely as the communication of names across links. After an illustrated description of how the π-calculus generalises conventional process algebras in treating mobility, several examples exploiting mobility are given in some detail. The important examples are the encoding into the π-calculus of higher-order functions (the λ-calculus and combinatory algebra), the transmission of processes as values, and the representation of data structures as processes. The paper continues by presenting the algebraic theory of strong bisimilarity and strong equivalence, including a new notion of equivalence indexed by distinctions—i.e., assumptions of inequality among names. These theories are based upon a semantics in terms of a labeled transition system and a notion of strong bisimulation, both of which are expounded in detail in a companion paper. We also report briefly on work-in-progress based upon the corresponding notion of weak bisimulation, in which internal actions cannot be observed."
}

@inproceedings{petri,
  author    = {C. A. Petri},
  title     = {Fundamentals of a Theory of Asynchronous Information Flow},
  booktitle = {{IFIP} Congress},
  pages     = {386--390},
  year      = {1962}
}

@article{first-lamport,
  author    = {Leslie Lamport},
  title     = {Specifying Concurrent Program Modules},
  journal   = {{ACM} Trans. Program. Lang. Syst.},
  volume    = {5},
  number    = {2},
  pages     = {190--222},
  year      = {1983}
}

@online{video-protocol,
  author = {Leslie Lamport},
  title = {TLA+ Video Curse},
  year = 2017,
  url = {http://lamport.azurewebsites.net/video/videos.html},
  urlaccessdate = {15 jun. 2019},
}
